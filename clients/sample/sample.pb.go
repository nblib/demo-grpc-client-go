// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample.proto

/*
Package sample is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	Location
*/
package sample

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/nblib/demo-grpc-client-go/clients/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Location struct {
	Lat float32 `protobuf:"fixed32,1,opt,name=lat" json:"lat,omitempty"`
	Lon float32 `protobuf:"fixed32,2,opt,name=lon" json:"lon,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Location) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func init() {
	proto.RegisterType((*Location)(nil), "sample.Location")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Position service

type PositionClient interface {
	PostLocation(ctx context.Context, opts ...grpc.CallOption) (Position_PostLocationClient, error)
	PullLocation(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Position_PullLocationClient, error)
}

type positionClient struct {
	cc *grpc.ClientConn
}

func NewPositionClient(cc *grpc.ClientConn) PositionClient {
	return &positionClient{cc}
}

func (c *positionClient) PostLocation(ctx context.Context, opts ...grpc.CallOption) (Position_PostLocationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Position_serviceDesc.Streams[0], c.cc, "/sample.Position/postLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &positionPostLocationClient{stream}
	return x, nil
}

type Position_PostLocationClient interface {
	Send(*Location) error
	CloseAndRecv() (*common.Empty, error)
	grpc.ClientStream
}

type positionPostLocationClient struct {
	grpc.ClientStream
}

func (x *positionPostLocationClient) Send(m *Location) error {
	return x.ClientStream.SendMsg(m)
}

func (x *positionPostLocationClient) CloseAndRecv() (*common.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *positionClient) PullLocation(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Position_PullLocationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Position_serviceDesc.Streams[1], c.cc, "/sample.Position/pullLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &positionPullLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Position_PullLocationClient interface {
	Recv() (*Location, error)
	grpc.ClientStream
}

type positionPullLocationClient struct {
	grpc.ClientStream
}

func (x *positionPullLocationClient) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Position service

type PositionServer interface {
	PostLocation(Position_PostLocationServer) error
	PullLocation(*common.Empty, Position_PullLocationServer) error
}

func RegisterPositionServer(s *grpc.Server, srv PositionServer) {
	s.RegisterService(&_Position_serviceDesc, srv)
}

func _Position_PostLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PositionServer).PostLocation(&positionPostLocationServer{stream})
}

type Position_PostLocationServer interface {
	SendAndClose(*common.Empty) error
	Recv() (*Location, error)
	grpc.ServerStream
}

type positionPostLocationServer struct {
	grpc.ServerStream
}

func (x *positionPostLocationServer) SendAndClose(m *common.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *positionPostLocationServer) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Position_PullLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PositionServer).PullLocation(m, &positionPullLocationServer{stream})
}

type Position_PullLocationServer interface {
	Send(*Location) error
	grpc.ServerStream
}

type positionPullLocationServer struct {
	grpc.ServerStream
}

func (x *positionPullLocationServer) Send(m *Location) error {
	return x.ServerStream.SendMsg(m)
}

var _Position_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.Position",
	HandlerType: (*PositionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "postLocation",
			Handler:       _Position_PostLocation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "pullLocation",
			Handler:       _Position_PullLocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sample.proto",
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x78, 0x92, 0xf3,
	0x73, 0x73, 0xf3, 0xf3, 0x20, 0xa2, 0x4a, 0x7a, 0x5c, 0x1c, 0x3e, 0xf9, 0xc9, 0x89, 0x25, 0x99,
	0xf9, 0x79, 0x42, 0x02, 0x5c, 0xcc, 0x39, 0x89, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x4c, 0x41,
	0x20, 0x26, 0x58, 0x24, 0x3f, 0x4f, 0x82, 0x09, 0x2a, 0x92, 0x9f, 0x67, 0x54, 0xc0, 0xc5, 0x11,
	0x90, 0x5f, 0x9c, 0x09, 0x56, 0x6f, 0xc8, 0xc5, 0x53, 0x90, 0x5f, 0x5c, 0x82, 0xd0, 0xaf, 0x07,
	0xb5, 0x10, 0x26, 0x22, 0xc5, 0xab, 0x07, 0xb5, 0xcc, 0x35, 0xb7, 0xa0, 0xa4, 0x52, 0x83, 0x11,
	0xac, 0xa5, 0x34, 0x27, 0x07, 0xae, 0x05, 0x55, 0x81, 0x14, 0x86, 0x09, 0x06, 0x8c, 0x4e, 0x2a,
	0x5c, 0xc2, 0x29, 0xa9, 0xb9, 0xf9, 0x7a, 0x19, 0xa9, 0xe5, 0xa9, 0x7a, 0x99, 0xf9, 0x50, 0x15,
	0x4e, 0xdc, 0xc1, 0x60, 0x3a, 0x00, 0xe4, 0x8b, 0x00, 0x86, 0x24, 0x36, 0xb0, 0x77, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xbf, 0xf7, 0x28, 0xf4, 0x00, 0x00, 0x00,
}
